package com.caringcoachtelegrambot.blocks.secondary;

import com.caringcoachtelegrambot.blocks.parents.SimpleBlockable;
import com.caringcoachtelegrambot.blocks.secondary.helpers.Helper;
import com.caringcoachtelegrambot.exceptions.NotValidDataException;
import com.caringcoachtelegrambot.models.Questionnaire;
import com.caringcoachtelegrambot.services.QuestionnaireService;
import com.caringcoachtelegrambot.utils.TelegramSender;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.request.ReplyKeyboardMarkup;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.springframework.stereotype.Component;

import static com.caringcoachtelegrambot.utils.Constants.BACK;


@Component
public class QuestionnaireRecordingBlockable extends SimpleBlockable<QuestionnaireRecordingBlockable.QuestionnaireHelper> {

    private final QuestionnaireService questionnaireService;

    public QuestionnaireRecordingBlockable(TelegramSender telegramSender, QuestionnaireService questionnaireService) {
        super(telegramSender);
        this.questionnaireService = questionnaireService;
    }

    @EqualsAndHashCode(callSuper = true)
    @Data
    public static class QuestionnaireHelper extends Helper {

        private Questionnaire questionnaire;

        private boolean started;

        public QuestionnaireHelper() {
            super();
            questionnaire = new Questionnaire();
            started = false;
        }
    }

    @Override
    public SendResponse process(Long chatId, Message message) {
        QuestionnaireHelper helper = helpers().get(chatId);
        String info = message.text();
        if (info != null && !info.isEmpty()) {
            if (!helper.isStarted()) {
                switch (info) {
                    case "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã" -> {
                        return startFillingOutTheQuestionnaire(chatId);
                    }
                    case "–ù–∞–∑–∞–¥" -> {
                        return goToBack(chatId);
                    }
                }
            } else return fillingOutTheQuestionnaire(chatId, info);
        }
        throw new NotValidDataException();
    }

    @Override
    public SendResponse uniqueStartBlockMessage(Long chatId) {
        helpers().put(chatId, new QuestionnaireHelper());
        return sender().sendResponse(new SendMessage(chatId, """
                –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã.
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏ –≥—Ä–∞–º–æ—Ç–Ω–µ–µ
                –º–Ω–µ —É–¥–∞—Å—Ç—Å—è —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –í–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω üå∏
                –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã!
                """).replyMarkup(markup()));
    }

    @Override
    public ReplyKeyboardMarkup markup() {
        return new ReplyKeyboardMarkup("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã")
                .addRow(BACK).oneTimeKeyboard(true);
    }

    private SendResponse startFillingOutTheQuestionnaire(Long chatId) {
        helpers().forEach((aLong, questionnaireHelper) -> {
            if (aLong.equals(chatId)) {
                questionnaireHelper.getQuestionnaire().setId(chatId);
                questionnaireHelper.setStarted(true);
            }
        });
        return sender().sendResponse(new SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
                .replyMarkup(new ReplyKeyboardMarkup(STOP_THE_FILL)));
    }

    private SendResponse fillingOutTheQuestionnaire(Long chatId, String info) {
        if (!forcedStopFillingOut(chatId, info)) {
            Questionnaire quest = helpers().get(chatId).getQuestionnaire();
            if (quest != null) {
                if (quest.getFirstName() == null) {
                    quest.setFirstName(info);
                    return continueFilling(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é");
                } else if (quest.getSecondName() == null) {
                    quest.setSecondName(info);
                    return continueFilling(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç");
                } else if (quest.getAge() == null) {
                    quest.setAge(info);
                    return continueFilling(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç");
                } else if (quest.getHeight() == null) {
                    quest.setHeight(info);
                    return continueFilling(chatId, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å");
                } else if (quest.getWeight() == null) {
                    quest.setWeight(info);
                    return continueFilling(chatId, """
                            –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –≤–∞—à–∏ —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                            """);
                } else if (quest.getTargetOfTrainings() == null) {
                    quest.setTargetOfTrainings(info);
                    return continueFilling(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å, –≤ —Ç–æ–º —á–∏—Å–ª–µ, –ø–æ –∑–¥–æ—Ä–æ–≤—å—é");
                } else if (quest.getRestrictions() == null) {
                    quest.setRestrictions(info);
                    return continueFilling(chatId, "–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π –æ–ø—ã—Ç —É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è");
                } else if (quest.getExperience() == null) {
                    quest.setExperience(info);
                    return continueFilling(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è");
                } else if (quest.getNutrition() == null) {
                    quest.setNutrition(info);
                    return continueFilling(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—Ñ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç–µ");
                } else if (quest.getEquipment() == null) {
                    quest.setEquipment(info);
                    return continueFilling(chatId, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ! –ö–∞–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É –≤–∞—Å");
                } else if (quest.getPreferences() == null) {
                    quest.setPreferences(info);
                    questionnaireService.postQuestionnaire(quest);
                    stopFillingOut(chatId);
                    continueFilling(chatId, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!");
                    return goToBack(chatId);
                }
            }
            return sender().sendResponse(new SendMessage(chatId, "–ö–∞–∫–æ–π-—Ç–æ –∫–æ—Å—è–∫"));
        }
        return sender().sendResponse(new SendMessage(chatId, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"));
    }

    private static final String STOP_THE_FILL = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞";

    private boolean forcedStopFillingOut(Long chatId, String info) {
        if (info.equals(STOP_THE_FILL)) {
            stopFillingOut(chatId);
            return true;
        } else return false;
    }

    private void stopFillingOut(Long chatId) {
        helpers().get(chatId).setStarted(false);
        helpers().get(chatId).setQuestionnaire(new Questionnaire());
    }

    private SendResponse continueFilling(Long chatId, String messageText) {
        return sender().sendResponse(new SendMessage(chatId, messageText));
    }
}
